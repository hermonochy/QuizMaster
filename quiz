#!/usr/bin/env python3
import pygame
import sys
import json
import random
import colorsys
import re
import os
import subprocess
from glob import glob
import datetime

from pygame.locals import *
from tkinter import *
from tkinter import messagebox

from modules.persistence import *
from modules.searchQuiz import search_str_in_file
from modules.pygameTextInput.pygame_textinput import TextInputVisualizer
import modules.PySimpleGUI as sg

pygame.init()
pygame.font.init()

textinput = TextInputVisualizer()
pygame.key.set_repeat(200, 25)

print(asciiartstart)

try:
  with open(".Preferences.json", "r") as file:
      try:
          prefDict = json.load(file)
          v = prefDict["Volume"]
          if isItHalloweenTimeNow():
              colour_background = (250,100,0)
              buttons_colour =  (255,110,10)
              music = "music/music_halloween1.ogg"
          elif isItValentinesTimeNow():
              music = "music/music_valentines1.ogg"
              colour_background = (255,0,0)
              buttons_colour =  (255,10,10)
          elif isItStPatricksTimeNow():
              music = "music/music_stpatrick1.ogg"
              colour_background = (0,150,0)
              buttons_colour =  (10,175,10) 
          elif isItChristmasTimeNow():
              music = "music/music_christmas1.ogg"
              colour_background = prefDict["colour"]
              buttons_colour = prefDict["buttoncolour"]         
          else:
              music = prefDict["Music"]
              colour_background = prefDict["colour"]
              buttons_colour = prefDict["buttoncolour"] 
          colour = colour_background
          button_colour = buttons_colour
      except json.JSONDecodeError:
          v = 0.5
          music_list = ['music/music1.ogg', 'music/music2.ogg', 'music/music3.ogg', 'music/music4.ogg', 'music/music5.ogg', 'music/music6.ogg']
          music = (random.choice(music_list))
          col_bg = random.uniform(0,1)
          colour_background = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,0.975))) 
          buttons_colour = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,1))) 
          colour = colour_background
          button_colour = buttons_colour
except FileNotFoundError:
    v = 0.5
    music_list = ['music/music1.ogg', 'music/music2.ogg', 'music/music3.ogg', 'music/music4.ogg', 'music/music5.ogg', 'music/music6.ogg']
    music = (random.choice(music_list))
    col_bg = random.uniform(0,1)
    colour_background = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,0.975))) 
    buttons_colour = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,1))) 
    colour = colour_background
    button_colour = buttons_colour
     

SCREEN_WIDTH = 1250
SCREEN_HEIGHT = 700
BACKGROUND_COLOUR = colour
BUTTON_COLOUR = button_colour
BLACK = (0, 0, 0)
FONT_SIZE = 40
QUESTION_OFFSET = 50
ANSWER_OFFSET = 200
OPTION_HEIGHT = 50

class Button:
    def __init__(self, text, position, width, height):
        self.text = text
        self.position = position
        self.width = width
        self.height = height + 100 
        self.rect = pygame.Rect(position[0], position[1], width, height)

    def draw(self, screen, color):
        pygame.draw.rect(screen, color, self.rect)
        font = pygame.font.Font(None, FONT_SIZE)
        label = font.render(self.text, True, BLACK)
        text_rect = label.get_rect(center=self.rect.center)
        screen.blit(label, text_rect)

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('QuizMaster')

def load_quiz(filename):
    with open(filename, 'r') as file:
        quizDicts = json.load(file)
        questionList = []
        for q in quizDicts["listOfQuestions"]:
            qq = QuizQuestion(**q)
            questionList.append(qq)
        titleofquiz = quizDicts["title"]
    return questionList, titleofquiz

def display_message(message, y_position, font_size):
    font = pygame.font.Font(None, font_size)
    words = message.split()
    
    if len(message) > 60:
        text_lines = []
        line = ""
        
        for word in words:
            if font.size(line + word)[0] <= SCREEN_WIDTH:
                line += word + " "
            else:
                text_lines.append(line)
                line = word + " "
        
        if line:
            text_lines.append(line)

        for line in text_lines:
            text = font.render(line, True, BLACK)
            text_rect = text.get_rect(center=(SCREEN_WIDTH // 2 , y_position))
            screen.blit(text, text_rect)
            y_position += text.get_height()
    else:
        text = font.render(message, True, BLACK)
        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, y_position))
        screen.blit(text, text_rect)
        
        y_position += text.get_height()

    return y_position
    
def end():
    print(asciiartend)
    pygame.quit()
    sys.exit()   
    

def quiz_game(questionList, titleofquiz, BACKGROUND_COLOUR, BUTTON_COLOUR):
    incorrect_questions = []
    running = True
    questionIndex = 0
    correctAnswers = 0
    totalQuestions = len(questionList)
    background_color = BACKGROUND_COLOUR
    good_praise_list = [f"Well Done! You know a lot about {titleofquiz}!",f"You are an expert on {titleofquiz}!", f" You have mastered {titleofquiz}!",f"You are amazing at {titleofquiz}!"]
    good_praise = (random.choice(good_praise_list))
    medium_praise_list = ["Good enough...",f"You have a fair amount of knowledge on {titleofquiz}!", f"Not far of mastering {titleofquiz}", f"Just abit more practice on {titleofquiz}!"]
    medium_praise = (random.choice(medium_praise_list))
    bad_praise_list = [f"Your forte is definitely not {titleofquiz}",f"You are terrible at {titleofquiz}!", f"You have alot to learn about {titleofquiz}!", f"You might want to consider revising another topic!"]
    bad_praise = (random.choice(bad_praise_list))
    for i in range(3,0,-1):
        screen.fill(BACKGROUND_COLOUR)
        display_message(titleofquiz, QUESTION_OFFSET,70)
        display_message((f"{i}!"), QUESTION_OFFSET+200,150)
        pygame.display.update()
        pygame.time.delay(1000)

    
    while running and questionIndex < totalQuestions:
        currentQuestion = questionList[questionIndex]

        user_answer = None
        time_remaining = currentQuestion.timeout

        
        answerOptions = [currentQuestion.correctAnswer] + currentQuestion.wrongAnswers
        random.shuffle(answerOptions)

        buttons = []
        for idx, answer in enumerate(answerOptions):
            button = Button(f"{idx + 1}. {answer}", (SCREEN_WIDTH // 2 - 150, ANSWER_OFFSET + idx * OPTION_HEIGHT), 300, 40)
            buttons.append(button)

        while running and time_remaining > 0 and user_answer is None:
            screen.fill(background_color)
            display_message(f"Question {questionIndex + 1} out of {totalQuestions} : {currentQuestion.question}", QUESTION_OFFSET, 50)

            for button in buttons:
                button.draw(screen, BUTTON_COLOUR if user_answer is None else BACKGROUND_COLOUR)            
            button_end = Button("End Quiz", (SCREEN_WIDTH // 2+350 , SCREEN_HEIGHT // 2+200), 250, 40)                
            button_go_back = Button("Main Menu", (SCREEN_WIDTH // 2+350 , SCREEN_HEIGHT // 2+250), 250, 40)
            button_leave = Button("Quit", (SCREEN_WIDTH // 2+350 , SCREEN_HEIGHT // 2+300), 250, 40)
            display_message(f"Time remaining: {time_remaining}", SCREEN_HEIGHT - QUESTION_OFFSET, 40)
            button_end.draw(screen, BUTTON_COLOUR)
            button_go_back.draw(screen, BUTTON_COLOUR)
            button_leave.draw(screen, BUTTON_COLOUR)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == QUIT:
                    end()
                if event.type == MOUSEBUTTONDOWN:
                    pos = pygame.mouse.get_pos() 
                    if button_end.is_clicked(pos):
                       time_remaining = 0
                       totalQuestions = questionIndex                                                 
                    if button_go_back.is_clicked(pos):
                       main(music,BACKGROUND_COLOUR,BUTTON_COLOUR, v)                      
                    if button_leave.is_clicked(pos):
                       end()
                    pygame.time.wait(20)
                    for idx, button in enumerate(buttons):
                        if button.is_clicked(pos):
                            user_answer = idx

                            
                if event.type == KEYDOWN:
                    if event.key in [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4,pygame.K_5,pygame.K_6,pygame.K_7,pygame.K_8,pygame.K_9]:
                        user_answer = event.key - pygame.K_1

            time_remaining -= 1
            pygame.time.wait(1000)

        correct_answer_index = answerOptions.index(currentQuestion.correctAnswer)
        if user_answer is not None:
            if user_answer == correct_answer_index:
                correctAnswers += 1
            else:
                incorrect_questions.append(currentQuestion)

        questionIndex += 1

    while True:
        screen.fill(background_color)
        y_position = display_message(f"Quiz completed! You got {correctAnswers} out of {totalQuestions} questions correct.", SCREEN_HEIGHT // 2-200,40)
        try:
            if correctAnswers/totalQuestions > 0.8:
                display_message(good_praise, y_position,40)
            if correctAnswers/totalQuestions > 0.4 and correctAnswers/totalQuestions < 0.8 or correctAnswers/totalQuestions == 0.8:
                display_message(medium_praise, y_position,40)
            if correctAnswers/totalQuestions < 0.4 or correctAnswers/totalQuestions==0.4:
                display_message(bad_praise, y_position,40)
        except ZeroDivisionError:
                display_message("No questions attempted!", y_position,40)
    
        button_go_back = Button("Main Menu", (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 + 50), 250, 40)
        button_replay = Button("Replay", (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 + 100), 250, 40)
        button_quit = Button("Quit", (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 + 150), 250, 40)
        if incorrect_questions:
          button_show_incorrect = Button("Show Incorrect Answers", (SCREEN_WIDTH // 2 - 150 , SCREEN_HEIGHT // 2), 250, 40)
          button_show_incorrect.draw(screen, BUTTON_COLOUR)
        button_go_back.draw(screen, BUTTON_COLOUR)
        button_replay.draw(screen, BUTTON_COLOUR)
        button_quit.draw(screen, BUTTON_COLOUR)        
        
        pygame.display.update()

        for event in pygame.event.get(): 
            if event.type == QUIT:
               end()
            if event.type == MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                if incorrect_questions and questionIndex > 0:
                    if button_show_incorrect.is_clicked(pos):
                      messages = []
                      for question in incorrect_questions:
                          messages.append(f"""{question.question}
Correct Answer: {question.correctAnswer}""")

                      final_message = '\n \n'.join(messages)

                      layout = [
                          [sg.Multiline(final_message, size=(100, 20), disabled=True)],
                        ]

                      window = sg.Window('Wrong Questions', layout)

                      while True:
                          event, values = window.read()
                          if event == sg.WINDOW_CLOSED:
                              window.close()
                              break
                          
                if button_go_back.is_clicked(pos):
                     return incorrect_questions, True
                if button_replay.is_clicked(pos):
                    quiz_game(questionList, titleofquiz, BACKGROUND_COLOUR, BUTTON_COLOUR)
                if button_quit.is_clicked(pos):
                     end()
                          

def main(music,BACKGROUND_COLOUR,BUTTON_COLOUR, v):
    running = True
    icon = pygame.image.load('images/logo1.png')
    pygame.mixer.init()
    pygame.mixer.music.load(music)
    pygame.mixer.music.play(-1)
    pygame.display.set_icon(icon)
    while running:
        screen.fill(BACKGROUND_COLOUR)
        button_play = Button("Play a Quiz", (SCREEN_WIDTH // 2 + 50 , SCREEN_HEIGHT // 2), 250, 60)
        button_make = Button("Make a Quiz", (SCREEN_WIDTH // 2 - 300 , SCREEN_HEIGHT // 2), 250, 60)
        button_preferences = Button("Preferences", (SCREEN_WIDTH // 2 - 300 , SCREEN_HEIGHT // 2 + 100), 250, 60)
        button_quit = Button("Quit", (SCREEN_WIDTH // 2 + 50 , SCREEN_HEIGHT // 2 + 100), 250, 60)   
        display_message("Welcome to QuizMaster!", SCREEN_HEIGHT - 600, 75)      
        button_make.draw(screen, BUTTON_COLOUR)
        button_play.draw(screen, BUTTON_COLOUR)
        button_preferences.draw(screen, BUTTON_COLOUR)
        button_quit.draw(screen, BUTTON_COLOUR)                
        pygame.display.update()
        for event in pygame.event.get(): 
            if event.type == QUIT:
                end()
            if event.type == MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                if button_quit.is_clicked(pos):
                   end()
                if button_make.is_clicked(pos):
                   subprocess.Popen(["python3","quizcreator"])
                if button_preferences.is_clicked(pos):
                  numList = re.findall(r'\d+',music)                  
                  i = int(numList[0]) if numList else 1 
                       
                  while running:
                    screen.fill(BACKGROUND_COLOUR)
                    display_message("Preferences", SCREEN_HEIGHT - 600, 75)
                    button_decrease = Button("Decrease volume", (SCREEN_WIDTH // 2 - 300 , SCREEN_HEIGHT // 2 +100), 250, 60)
                    button_increase = Button("Increase volume", (SCREEN_WIDTH // 2 - 300 , SCREEN_HEIGHT // 2), 250, 60)
                    button_colour = Button("Change Colour", (SCREEN_WIDTH // 2 + 200, SCREEN_HEIGHT // 2), 250, 60)
                    button_music = Button("Change Music", (SCREEN_WIDTH // 2 + 200, SCREEN_HEIGHT // 2 +100), 250, 60)
                    button_go_back = Button("Main Menu", (SCREEN_WIDTH // 2 + 200, SCREEN_HEIGHT // 2+250), 250, 60)                    
                    button_increase.draw(screen, BUTTON_COLOUR)
                    button_decrease.draw(screen, BUTTON_COLOUR)
                    button_music.draw(screen, BUTTON_COLOUR)
                    button_colour.draw(screen, BUTTON_COLOUR)
                    button_go_back.draw(screen, BUTTON_COLOUR)                    
                    pygame.display.update()
                    for event in pygame.event.get(): 
                        if event.type == QUIT:
                            end()
                        if event.type == MOUSEBUTTONDOWN:
                            pos = pygame.mouse.get_pos()
                            if button_increase.is_clicked(pos):
                              try:
                                 v += 0.1
                              except:
                                 if v > 1:
                                    pass  
                              pygame.mixer.music.set_volume(v)
                            if button_decrease.is_clicked(pos):
                              try:
                                 v -= 0.1
                              except:
                                 if v < 0:
                                    pass  
                              pygame.mixer.music.set_volume(v)
                            if button_music.is_clicked(pos):
                                if i < 6:
                                    i += 1
                                else:    
                                    i = 1
                                pygame.mixer.music.stop
                                pygame.mixer.music.unload
                                music = f'music/music{i}.ogg'
                                
                                if isItChristmasTimeNow():
                                  music = ["music/music_christmas1.ogg","music/music_christmas2.ogg"][i%2]
                                if isItHalloweenTimeNow():
                                  music = ["music/music_halloween1.ogg","music/music_halloween2.ogg"][i%2]
                                if isItStPatricksTimeNow():
                                  music = "music/music_stpatricks1.ogg"
                                if isItValentinesTimeNow():
                                  music = "music/music_valentines1.ogg"  
                                
                                pygame.mixer.music.load(music)
                                pygame.mixer.music.play(-1)                                

                            if button_colour.is_clicked(pos):    
                                col_bg = random.uniform(0,1)
                                colour_background = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,0.975))) 
                                buttons_colour = tuple(map(lambda x: 255.0*x, colorsys.hsv_to_rgb(col_bg,1,1))) 
                                colour = colour_background
                                button_colour = buttons_colour
                                BACKGROUND_COLOUR = colour
                                BUTTON_COLOUR = button_colour
                            if button_go_back.is_clicked(pos):
                               save_preferences(v,music,BACKGROUND_COLOUR,BUTTON_COLOUR)                            
                               main(music,BACKGROUND_COLOUR,BUTTON_COLOUR, v)
                                                                                         
                if button_play.is_clicked(pos):
                    searchTerm = ""
                    user_answer=None
                    while True:
                      screen.fill(BACKGROUND_COLOUR)
                      display_message("Enter Quiz Keyword:", 30, 50)   
                      events = pygame.event.get()
                      for event in events:
                        if event.type == QUIT:
                            end()
                      textinput.update(events)

                      screen.blit(textinput.surface, (500, 100))

                      if [ev for ev in events if ev.type == pygame.KEYDOWN and ev.key == pygame.K_RETURN]:
                          searchTerm=textinput.value
                          break
                      
                      pygame.display.update()
                      pygame.time.wait(30)           
                    
                    quizfiles = glob('./quizzes/**/*.json', recursive=True)
                    
                    quizfileSearchResults= []
                    for file in quizfiles:
                      if search_str_in_file(file,searchTerm):
                        quizfileSearchResults.append(file)                      
                      
                    if not quizfileSearchResults:
                        break
                    buttons = []
                    for idx, quizfile in enumerate(quizfileSearchResults):
                       try:  
                          with open(quizfile, "r") as file:
                              quiztitle = json.load(file)["title"]
                          button = Button(quiztitle, \
                                    (SCREEN_WIDTH // 2 - 150, ANSWER_OFFSET + idx * OPTION_HEIGHT), 300, 40)
                          buttons.append(button)    
                       except json.decoder.JSONDecodeError as ex:
                          print(f"Error in quizfile {quizfile}! {ex}")
                          continue 
                    for button in buttons:
                       button.draw(screen, BUTTON_COLOUR if user_answer is None else BACKGROUND_COLOUR)
                    pygame.display.update()
                    running = True
                    while running:   
                      for event in pygame.event.get(): 
                        if event.type == QUIT:
                            end()
                        if event.type == MOUSEBUTTONDOWN:
                            pos = pygame.mouse.get_pos()   
                            for idx, button in enumerate(buttons):
                                if button.is_clicked(pos):
                                    user_answer = idx 
                      if user_answer is not None:                
                        filename = quizfileSearchResults[user_answer]
                      
                        try:
                            questionList, titleofquiz = load_quiz(filename)
                        except Exception as ex:
                            messagebox.showinfo(title='Error', message=f'This is not a quiz file: {ex}!')
                            continue
                        print("Questions:",questionList)
                        
                        incorrect_questions, go_back = quiz_game(questionList, titleofquiz, BACKGROUND_COLOUR, BUTTON_COLOUR)
                        if go_back:
                           main(music,BACKGROUND_COLOUR,BUTTON_COLOUR, v)
                        button_pressed = False
                        running=False

if __name__ == '__main__':
    main(music,BACKGROUND_COLOUR,BUTTON_COLOUR, v)
